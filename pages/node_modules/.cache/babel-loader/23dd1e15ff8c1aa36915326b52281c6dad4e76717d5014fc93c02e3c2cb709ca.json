{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CALVESI\\\\OneDrive\\\\Bureau\\\\ProjectThomasChocoPap\\\\src\\\\store\\\\panier-context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useEffect, useState } from \"react\";\nimport chocolats from \"../store/data.json\";\n\n// contient des valeurs par défaut pour les éléments du panier et des fonctions pour ajouter, retirer et réinitialiser le panier.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PanierContext = /*#__PURE__*/createContext({\n  items: [],\n  addItemToCart: () => {},\n  updateItemsquantity: () => {},\n  resetItems: () => {},\n  removeItemFromCart: () => {}\n});\n\n// - `cartReducer` définit la logique de modification de l'état du panier en fonction des actions envoyées. \nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"AJOUTER_DANS_PANIER\":\n      const existingItem = state.items.find(item => item.id === action.payload.productId);\n      const updatedItems = [...state.items];\n      if (existingItem) {\n        const index = updatedItems.findIndex(item => item.id === action.payload.productId);\n        updatedItems[index].quantity += 1;\n      } else {\n        const product = chocolats.chocolats.find(p => p.id === action.payload.productId);\n        if (product) {\n          updatedItems.push({\n            id: product.id,\n            title: product.title,\n            price: product.price,\n            quantity: 1\n          });\n        }\n      }\n      return {\n        ...state,\n        items: updatedItems\n      };\n    case \"RETIRER_DU_PANIER\":\n      const filteredItems = state.items.filter(item => item.id !== action.payload.productId);\n      return {\n        ...state,\n        items: filteredItems\n      };\n    case \"ACTUALISER_QUANTITE_PRODUIT\":\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const itemToUpdate = state.items.find(item => item.id === productId);\n      if (itemToUpdate) {\n        const index = state.items.findIndex(item => item.id === productId);\n        const updatedQuantity = itemToUpdate.quantity + quantity;\n        const newItems = [...state.items];\n        if (updatedQuantity <= 0) {\n          newItems.splice(index, 1);\n        } else {\n          newItems[index].quantity = updatedQuantity;\n        }\n        return {\n          ...state,\n          items: newItems\n        };\n      }\n      return state;\n    case 'RESET_ITEMS':\n      // logique pour réinitialiser le panier\n      return {\n        ...state,\n        items: []\n      };\n    default:\n      return state;\n  }\n};\n\n//gérer l'état du panier à l'aide du `cartReducer`.\n// manipulation du panier (`handleProductToCart`, `handleRemoveFromCart`, `handleUpdateProductQuantity`) qui utilisent le `cartDispatch` pour envoyer des actions au `cartReducer`.\nexport const PanierContextProvider = ({\n  children\n}) => {\n  _s();\n  const [cartState, cartDispatch] = useReducer(cartReducer, {\n    items: []\n  });\n  const resetItems = () => {\n    cartDispatch({\n      type: \"RESET_ITEMS\"\n    });\n  };\n\n  // fonction d'ajouter dans le panier \n\n  const handleProductToCart = productId => {\n    cartDispatch({\n      type: \"AJOUTER_DANS_PANIER\",\n      payload: {\n        productId\n      }\n    });\n  };\n  const handleRemoveFromCart = productId => {\n    cartDispatch({\n      type: \"RETIRER_DU_PANIER\",\n      payload: {\n        productId\n      }\n    });\n  };\n  const handleUpdateProductQuantity = (productId, quantity) => {\n    cartDispatch({\n      type: \"ACTUALISER_QUANTITE_PRODUIT\",\n      payload: {\n        productId,\n        quantity\n      }\n    });\n  };\n\n  // contient les éléments du panier actuels et les fonctions pour les manipuler.\n  const initialValue = {\n    items: cartState.items,\n    addItemToCart: handleProductToCart,\n    removeItemFromCart: handleRemoveFromCart,\n    updateItemsquantity: handleUpdateProductQuantity,\n    resetItems: resetItems\n  };\n  return /*#__PURE__*/_jsxDEV(PanierContext.Provider, {\n    value: initialValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 1\n  }, this);\n};\n_s(PanierContextProvider, \"ih4sk9WFw1gDOaLDprbiZOGss0M=\");\n_c = PanierContextProvider;\nexport default PanierContext;\nvar _c;\n$RefreshReg$(_c, \"PanierContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useEffect","useState","chocolats","jsxDEV","_jsxDEV","PanierContext","items","addItemToCart","updateItemsquantity","resetItems","removeItemFromCart","cartReducer","state","action","type","existingItem","find","item","id","payload","productId","updatedItems","index","findIndex","quantity","product","p","push","title","price","filteredItems","filter","itemToUpdate","updatedQuantity","newItems","splice","PanierContextProvider","children","_s","cartState","cartDispatch","handleProductToCart","handleRemoveFromCart","handleUpdateProductQuantity","initialValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CALVESI/OneDrive/Bureau/ProjectThomasChocoPap/src/store/panier-context.jsx"],"sourcesContent":["import { createContext, useReducer, useEffect, useState } from \"react\";\r\nimport chocolats from \"../store/data.json\";\r\n\r\n\r\n// contient des valeurs par défaut pour les éléments du panier et des fonctions pour ajouter, retirer et réinitialiser le panier.\r\nexport const PanierContext = createContext({\r\nitems: [],\r\naddItemToCart: () => {},\r\nupdateItemsquantity : ()=>{},\r\nresetItems :()=>{},\r\nremoveItemFromCart:()=>{},\r\n});\r\n\r\n\r\n// - `cartReducer` définit la logique de modification de l'état du panier en fonction des actions envoyées. \r\nconst cartReducer = (state, action) => {\r\nswitch (action.type) {\r\ncase \"AJOUTER_DANS_PANIER\":\r\nconst existingItem = state.items.find(item => item.id === action.payload.productId);\r\nconst updatedItems = [...state.items];\r\n\r\nif (existingItem) {\r\nconst index = updatedItems.findIndex(item => item.id === action.payload.productId);\r\nupdatedItems[index].quantity += 1;\r\n} else {\r\nconst product = chocolats.chocolats.find(p => p.id === action.payload.productId);\r\nif (product) {\r\nupdatedItems.push({\r\nid: product.id,\r\ntitle: product.title,\r\nprice: product.price,\r\nquantity: 1,\r\n});\r\n}\r\n}\r\nreturn { ...state, items: updatedItems };\r\n\r\ncase \"RETIRER_DU_PANIER\":\r\nconst filteredItems = state.items.filter(item => item.id !== action.payload.productId);\r\nreturn { ...state, items: filteredItems };\r\n\r\ncase \"ACTUALISER_QUANTITE_PRODUIT\":\r\nconst { productId, quantity } = action.payload;\r\nconst itemToUpdate = state.items.find(item => item.id === productId);\r\n\r\nif (itemToUpdate) {\r\nconst index = state.items.findIndex(item => item.id === productId);\r\nconst updatedQuantity = itemToUpdate.quantity + quantity;\r\n\r\nconst newItems = [...state.items];\r\nif (updatedQuantity <= 0) {\r\nnewItems.splice(index, 1);\r\n} else {\r\nnewItems[index].quantity = updatedQuantity;\r\n}\r\nreturn { ...state, items: newItems };\r\n}\r\nreturn state;\r\n\r\ncase 'RESET_ITEMS':\r\n// logique pour réinitialiser le panier\r\nreturn { ...state, items: [] };\r\ndefault:\r\nreturn state;\r\n}\r\n};\r\n\r\n//gérer l'état du panier à l'aide du `cartReducer`.\r\n// manipulation du panier (`handleProductToCart`, `handleRemoveFromCart`, `handleUpdateProductQuantity`) qui utilisent le `cartDispatch` pour envoyer des actions au `cartReducer`.\r\nexport const PanierContextProvider = ({ children }) => {\r\nconst [cartState, cartDispatch] = useReducer(cartReducer, {\r\nitems: [],\r\n});\r\n\r\nconst resetItems = () => {\r\ncartDispatch({ \r\n\r\ntype: \"RESET_ITEMS\",\r\n\r\n});\r\n};\r\n\r\n// fonction d'ajouter dans le panier \r\n\r\nconst handleProductToCart = (productId) => {\r\ncartDispatch({\r\ntype: \"AJOUTER_DANS_PANIER\",\r\npayload: { productId },\r\n});\r\n};\r\n\r\n\r\n\r\nconst handleRemoveFromCart = (productId) => {\r\ncartDispatch({\r\ntype: \"RETIRER_DU_PANIER\",\r\npayload: { productId },\r\n});\r\n};\r\n\r\nconst handleUpdateProductQuantity =(productId, quantity)=>{\r\n\r\ncartDispatch({\r\n\r\ntype:\"ACTUALISER_QUANTITE_PRODUIT\",\r\npayload : {\r\n\r\nproductId,\r\nquantity,\r\n},\r\n});\r\n}\r\n\r\n// contient les éléments du panier actuels et les fonctions pour les manipuler.\r\nconst initialValue = {\r\nitems: cartState.items,\r\naddItemToCart: handleProductToCart,\r\nremoveItemFromCart : handleRemoveFromCart,\r\nupdateItemsquantity : handleUpdateProductQuantity,\r\nresetItems: resetItems,\r\n};\r\n\r\nreturn (\r\n<PanierContext.Provider value={initialValue}>\r\n{children}\r\n</PanierContext.Provider>\r\n);\r\n};\r\n\r\nexport default PanierContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}