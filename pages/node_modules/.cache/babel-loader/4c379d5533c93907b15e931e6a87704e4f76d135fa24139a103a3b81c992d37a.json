{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CALVESI\\\\OneDrive\\\\Bureau\\\\ProjectThomasChocoPap\\\\src\\\\store\\\\panier-context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport chocolats from \"../store/data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PanierContext = /*#__PURE__*/createContext({\n  items: [],\n  addItemToCart: () => {},\n  updateItemsquantity: () => {},\n  resetItems: () => {}\n});\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"AJOUTER_DANS_PANIER\":\n      const existingItem = state.items.find(item => item.id === action.payload.productId);\n      const updatedItems = [...state.items];\n      if (existingItem) {\n        const index = updatedItems.findIndex(item => item.id === action.payload.productId);\n        updatedItems[index].quantity += 1;\n      } else {\n        const product = chocolats.chocolats.find(p => p.id === action.payload.productId);\n        if (product) {\n          updatedItems.push({\n            id: product.id,\n            title: product.title,\n            price: product.price,\n            quantity: 1\n          });\n        }\n      }\n      return {\n        ...state,\n        items: updatedItems\n      };\n    case \"RETIRER_DU_PANIER\":\n      const filteredItems = state.items.filter(item => item.id !== action.payload.productId);\n      return {\n        ...state,\n        items: filteredItems\n      };\n    case \"ACTUALISER_QUANTITE_PRODUIT\":\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const itemToUpdate = state.items.find(item => item.id === productId);\n      if (itemToUpdate) {\n        const index = state.items.findIndex(item => item.id === productId);\n        const updatedQuantity = itemToUpdate.quantity + quantity;\n        const newItems = [...state.items];\n        if (updatedQuantity <= 0) {\n          newItems.splice(index, 1);\n        } else {\n          newItems[index].quantity = updatedQuantity;\n        }\n        return {\n          ...state,\n          items: newItems\n        };\n      }\n      return state;\n    case 'RESET_ITEMS':\n      // logique pour réinitialiser le panier\n      return {\n        ...state,\n        items: []\n      };\n    default:\n      return state;\n  }\n};\nexport const PanierContextProvider = ({\n  children\n}) => {\n  _s();\n  const [cartState, cartDispatch] = useReducer(cartReducer, {\n    items: []\n  });\n  const resetItems = () => {\n    cartDispatch({\n      type: \"RESET_ITEMS\"\n    });\n  };\n  const handleProductToCart = productId => {\n    cartDispatch({\n      type: \"AJOUTER_DANS_PANIER\",\n      payload: {\n        productId\n      }\n    });\n  };\n  const handleRemoveFromCart = productId => {\n    cartDispatch({\n      type: \"RETIRER_DU_PANIER\",\n      payload: {\n        productId\n      }\n    });\n  };\n  const handleUpdateProductQuantity = (productId, quantity) => {\n    cartDispatch({\n      type: \"ACTUALISER_QUANTITE_PRODUIT\",\n      payload: {\n        productId,\n        quantity\n      }\n    });\n  };\n  const initialValue = {\n    items: cartState.items,\n    addItemToCart: handleProductToCart,\n    removeFromCart: handleRemoveFromCart,\n    updateItemsquantity: handleUpdateProductQuantity,\n    resetItems: resetItems\n  };\n  return /*#__PURE__*/_jsxDEV(PanierContext.Provider, {\n    value: initialValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(PanierContextProvider, \"x8hny0CQ9YZ4g6W1SEW52nr/S0U=\");\n_c = PanierContextProvider;\nexport default PanierContext;\nvar _c;\n$RefreshReg$(_c, \"PanierContextProvider\");","map":{"version":3,"names":["createContext","useReducer","chocolats","jsxDEV","_jsxDEV","PanierContext","items","addItemToCart","updateItemsquantity","resetItems","cartReducer","state","action","type","existingItem","find","item","id","payload","productId","updatedItems","index","findIndex","quantity","product","p","push","title","price","filteredItems","filter","itemToUpdate","updatedQuantity","newItems","splice","PanierContextProvider","children","_s","cartState","cartDispatch","handleProductToCart","handleRemoveFromCart","handleUpdateProductQuantity","initialValue","removeFromCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CALVESI/OneDrive/Bureau/ProjectThomasChocoPap/src/store/panier-context.jsx"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\nimport chocolats from \"../store/data.json\";\r\n\r\nexport const PanierContext = createContext({\r\n    items: [],\r\n    addItemToCart: () => {},\r\n    updateItemsquantity : ()=>{},\r\n    resetItems :()=>{},\r\n});\r\n\r\n\r\nconst cartReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"AJOUTER_DANS_PANIER\":\r\n            const existingItem = state.items.find(item => item.id === action.payload.productId);\r\n            const updatedItems = [...state.items];\r\n\r\n            if (existingItem) {\r\n                const index = updatedItems.findIndex(item => item.id === action.payload.productId);\r\n                updatedItems[index].quantity += 1;\r\n            } else {\r\n                const product = chocolats.chocolats.find(p => p.id === action.payload.productId);\r\n                if (product) {\r\n                    updatedItems.push({\r\n                        id: product.id,\r\n                        title: product.title,\r\n                        price: product.price,\r\n                        quantity: 1,\r\n                    });\r\n                }\r\n            }\r\n            return { ...state, items: updatedItems };\r\n\r\n        case \"RETIRER_DU_PANIER\":\r\n            const filteredItems = state.items.filter(item => item.id !== action.payload.productId);\r\n            return { ...state, items: filteredItems };\r\n\r\n        case \"ACTUALISER_QUANTITE_PRODUIT\":\r\n            const { productId, quantity } = action.payload;\r\n            const itemToUpdate = state.items.find(item => item.id === productId);\r\n\r\n            if (itemToUpdate) {\r\n                const index = state.items.findIndex(item => item.id === productId);\r\n                const updatedQuantity = itemToUpdate.quantity + quantity;\r\n\r\n                const newItems = [...state.items];\r\n                if (updatedQuantity <= 0) {\r\n                    newItems.splice(index, 1);\r\n                } else {\r\n                    newItems[index].quantity = updatedQuantity;\r\n                }\r\n                return { ...state, items: newItems };\r\n            }\r\n            return state;\r\n\r\n            case 'RESET_ITEMS':\r\n                // logique pour réinitialiser le panier\r\n                return { ...state, items: [] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const PanierContextProvider = ({ children }) => {\r\n    const [cartState, cartDispatch] = useReducer(cartReducer, {\r\n        items: [],\r\n    });\r\n\r\n    const resetItems = () => {\r\n        cartDispatch({ \r\n            \r\n            type: \"RESET_ITEMS\",\r\n\r\n        });\r\n      };\r\n\r\n    const handleProductToCart = (productId) => {\r\n        cartDispatch({\r\n            type: \"AJOUTER_DANS_PANIER\",\r\n            payload: { productId, },\r\n        });\r\n    };\r\n\r\n    const handleRemoveFromCart = (productId) => {\r\n        cartDispatch({\r\n            type: \"RETIRER_DU_PANIER\",\r\n            payload: { productId },\r\n        });\r\n    };\r\n\r\n    const handleUpdateProductQuantity =(productId, quantity)=>{\r\n\r\n        cartDispatch({\r\n\r\n            type:\"ACTUALISER_QUANTITE_PRODUIT\",\r\n            payload : {\r\n\r\n                productId,\r\n                quantity,\r\n            },\r\n        });\r\n    }\r\n\r\n    const initialValue = {\r\n        items: cartState.items,\r\n        addItemToCart: handleProductToCart,\r\n        removeFromCart : handleRemoveFromCart,\r\n        updateItemsquantity : handleUpdateProductQuantity,\r\n        resetItems: resetItems\r\n    };\r\n\r\n    return (\r\n        <PanierContext.Provider value={initialValue}>\r\n            {children}\r\n        </PanierContext.Provider>\r\n    );\r\n};\r\n\r\nexport default PanierContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}